plugins {
    id 'fabric-loom' version '0.9-SNAPSHOT'
    id 'maven-publish'
}

repositories {
    maven {
        url "https://maven.shedaniel.me/"
        content {
            includeGroup "me.shedaniel"
            includeGroup "me.shedaniel.cloth"
            includeGroup "dev.architectury"
        }
    }
    maven {
        name = 'Ladysnake Mods'
        url = 'https://ladysnake.jfrog.io/artifactory/mods'
    }
    maven {
        name = "ParchmentMC"
        url = "https://maven.parchmentmc.org/"
    }
    maven {
        url = "https://maven.terraformersmc.com/releases/"
        content {
            includeGroup "com.terraformersmc"
        }
    }
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

loom {
    accessWidenerPath = file("src/main/resources/buildinggadgets.accesswidener")
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-1.17.1:2021.09.05@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

    modImplementation("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}") {
        exclude group: "net.fabricmc.fabric-api", module: "fabric-api"
    }

    include modImplementation("teamreborn:energy:${project.energy_version}")

    modRuntime("dev.architectury:architectury-fabric:${project.architectury_version}")
    modRuntime("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}")

    include modImplementation("io.github.onyxstudios:Cardinal-Components-API:${project.cca_version}")
}

// Processes main only resources
//processResources {
//    inputs.property('version', project.version)
//    inputs.property('forge_major', forge_major)
//
//    from(sourceSets.main.resources.srcDirs) {
//        include 'META-INF/mods.toml'
//        expand 'version':project.version, 'forge_major':forge_major
//    }
//
//    from(sourceSets.main.resources.srcDirs) {
//        exclude 'META-INF/mods.toml'
//    }
//}

jar {
    from "LICENSE"
}

task deobfJar(type: Jar) {
    from(sourceSets.main.output)
    archiveName = "${baseName}-${version}-deobf.${extension}"
}

task sourcesJar(type: Jar) {
    from(sourceSets.main.allSource)
    archiveName = "${baseName}-${version}-sources.${extension}"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(jar) {
                builtBy remapJar
            }
            artifact("${project.buildDir.absolutePath}/libs/${archivesBaseName}-${project.version}.jar"){
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}

processResources {
    inputs.property "version", project.version

    from("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}


artifacts {
    archives deobfJar
    archives sourcesJar
}
