plugins {
    id 'fabric-loom' version '0.9-SNAPSHOT'
    id 'maven-publish'
}

group = project.maven_group
version = project.mod_version

repositories {
    maven {
        url "https://maven.shedaniel.me/"

        content {
            includeGroup "me.shedaniel"
            includeGroup "me.shedaniel.cloth"
            includeGroup "dev.architectury"
        }
    }

    maven {
        name = 'Ladysnake Mods'
        url = 'https://ladysnake.jfrog.io/artifactory/mods'
    }

    maven {
        name = "ParchmentMC"
        url = "https://maven.parchmentmc.org/"
    }

    maven {
        url = "https://maven.terraformersmc.com/releases/"
        content {
            includeGroup "com.terraformersmc"
        }
    }

    maven {
        url = "https://maven.jamieswhiteshirt.com/libs-release/"
        content {
            includeGroup 'com.jamieswhiteshirt'
        }
    }

    maven {
        name = "Flemmli97"
        url "https://gitlab.com/api/v4/projects/21830712/packages/maven"
    }

    maven { url 'https://jitpack.io' }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-1.17.1:${project.parchment_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

    modImplementation("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    include modImplementation("teamreborn:energy:${project.energy_version}")
    include modImplementation("io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:${project.cca_version}")
    include modImplementation("io.github.onyxstudios.Cardinal-Components-API:cardinal-components-item:${project.cca_version}")
    include modImplementation("io.github.onyxstudios.Cardinal-Components-API:cardinal-components-world:${project.cca_version}")
    include modImplementation("io.github.onyxstudios.Cardinal-Components-API:cardinal-components-level:${project.cca_version}")

    modRuntime("dev.architectury:architectury-fabric:${project.architectury_version}")
    modImplementation("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}")

    modImplementation "com.jamieswhiteshirt:rtree-3i-lite-fabric:${project.rtree_version}"
    modImplementation "com.github.Draylar:get-off-my-lawn:${project.goml_version}"

    modImplementation("io.github.flemmli97:flan:${project.minecraft_version}-${project.flan_version}") {
        transitive = false //Remove this if you want to have all those optional dependencies
    }
    modCompileOnly "org.anti-ad.mc:inventory-profiles-next:fabric-1.17.1-${project.ipn_version}"

}

base {
    archivesName.set(project.archives_base_name)
}

java {
    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16

    withSourcesJar()
}

loom {
    accessWidenerPath.set(file("src/main/resources/buildinggadgets.accesswidener"))
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.release.set(16)
}

tasks.withType(AbstractArchiveTask) {
    from(project.file("LICENSE"))
}

processResources {
    inputs.property("version", project.version)

    filesMatching("fabric.mod.json") {
        expand("version": project.version)
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = uri("${buildDir}/repos/releases")
            def snapshotsRepoUrl = uri("${buildDir}/repos/snapshots")
            name = "Project"
            url = version.toString().endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}
